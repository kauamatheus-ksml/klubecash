// lib/app.dart
// üöÄ App Principal - Configura√ß√£o central do aplicativo Klube Cash

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_localizations/flutter_localizations.dart';

import 'core/constants/app_strings.dart';
import 'core/routes/app_router.dart';
import 'core/theme/app_theme.dart';
import 'core/theme/theme_provider.dart';

/// Widget principal do aplicativo Klube Cash
/// 
/// Configura toda a estrutura base incluindo:
/// - Tema e cores
/// - Navega√ß√£o com GoRouter
/// - Localiza√ß√£o pt-BR
/// - Observadores de estado
class KlubeCashApp extends ConsumerWidget {
  const KlubeCashApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // Watch dos providers necess√°rios
    final router = ref.watch(appRouterProvider);
    final themeMode = ref.watch(themeNotifierProvider);

    return MaterialApp.router(
      // ‚öôÔ∏è CONFIGURA√á√ïES B√ÅSICAS
      title: AppStrings.appName,
      debugShowCheckedModeBanner: false,
      
      // üé® CONFIGURA√á√ÉO DE TEMA
      theme: AppTheme.lightTheme,
      darkTheme: AppTheme.darkTheme,
      themeMode: themeMode,
      
      // üõ£Ô∏è CONFIGURA√á√ÉO DE NAVEGA√á√ÉO
      routerConfig: router,
      
      // üåç CONFIGURA√á√ÉO DE LOCALIZA√á√ÉO
      localizationsDelegates: const [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('pt', 'BR'), // Portugu√™s Brasil
        Locale('en', 'US'), // Ingl√™s (fallback)
      ],
      locale: const Locale('pt', 'BR'),
      
      // üì± CONFIGURA√á√ïES DO SISTEMA
      builder: (context, child) {
        return AnnotatedRegion<SystemUiOverlayStyle>(
          value: _getSystemUiOverlayStyle(context),
          child: MediaQuery(
            // Configura√ß√£o responsiva
            data: MediaQuery.of(context).copyWith(
              textScaleFactor: MediaQuery.of(context).textScaleFactor.clamp(0.8, 1.2),
            ),
            child: child ?? const SizedBox.shrink(),
          ),
        );
      },
    );
  }

  /// Configura√ß√£o da barra de status baseada no tema atual
  SystemUiOverlayStyle _getSystemUiOverlayStyle(BuildContext context) {
    final brightness = Theme.of(context).brightness;
    
    if (brightness == Brightness.dark) {
      return const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.light,
        statusBarBrightness: Brightness.dark,
        systemNavigationBarColor: Color(0xFF121212),
        systemNavigationBarIconBrightness: Brightness.light,
        systemNavigationBarDividerColor: Colors.transparent,
      );
    } else {
      return const SystemUiOverlayStyle(
        statusBarColor: Colors.transparent,
        statusBarIconBrightness: Brightness.dark,
        statusBarBrightness: Brightness.light,
        systemNavigationBarColor: Colors.white,
        systemNavigationBarIconBrightness: Brightness.dark,
        systemNavigationBarDividerColor: Colors.transparent,
      );
    }
  }
}

/// Provider Observer para debug e monitoramento do Riverpod
class AppProviderObserver extends ProviderObserver {
  @override
  void didAddProvider(
    ProviderBase<Object?> provider,
    Object? value,
    ProviderContainer container,
  ) {
    debugPrint('üü¢ Provider adicionado: ${provider.name ?? provider.runtimeType}');
  }

  @override
  void didDisposeProvider(
    ProviderBase<Object?> provider,
    ProviderContainer container,
  ) {
    debugPrint('üî¥ Provider removido: ${provider.name ?? provider.runtimeType}');
  }

  @override
  void didUpdateProvider(
    ProviderBase<Object?> provider,
    Object? previousValue,
    Object? newValue,
    ProviderContainer container,
  ) {
    debugPrint('üîÑ Provider atualizado: ${provider.name ?? provider.runtimeType}');
  }

  @override
  void providerDidFail(
    ProviderBase<Object?> provider,
    Object error,
    StackTrace stackTrace,
    ProviderContainer container,
  ) {
    debugPrint('‚ùå Provider falhou: ${provider.name ?? provider.runtimeType}');
    debugPrint('Erro: $error');
  }
}

/// Configura√ß√£o global de erro para Riverpod
class AppErrorHandler {
  static void handleError(Object error, StackTrace stackTrace) {
    debugPrint('üö® Erro n√£o tratado no app: $error');
    debugPrint('Stack trace: $stackTrace');
    
    // Aqui voc√™ pode adicionar integra√ß√£o com crash analytics
    // como Firebase Crashlytics, Sentry, etc.
  }
}

/// Extens√£o para facilitar acesso a providers comuns
extension AppProviders on WidgetRef {
  /// Acesso r√°pido ao router
  GoRouter get router => read(appRouterProvider);
  
  /// Acesso r√°pido ao tema
  ThemeMode get theme => watch(themeNotifierProvider);
  
  /// Verifica√ß√£o de autentica√ß√£o
  bool get isAuthenticated => watch(isAuthenticatedProvider);
}