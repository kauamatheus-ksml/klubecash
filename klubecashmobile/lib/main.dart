// lib/main.dart
// üöÄ Main - Ponto de entrada principal do aplicativo Klube Cash

import 'dart:async';
import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'app.dart';

/// üéØ Fun√ß√£o principal do aplicativo
/// 
/// Respons√°vel por:
/// - Configurar Flutter binding
/// - Inicializar depend√™ncias
/// - Configurar orienta√ß√£o da tela
/// - Configurar barra de status
/// - Tratar erros globais
/// - Executar o app com Riverpod
void main() async {
  // Garante inicializa√ß√£o dos bindings do Flutter
  WidgetsFlutterBinding.ensureInitialized();

  // Configura tratamento de erros global
  await _setupErrorHandling();

  // Configura orienta√ß√£o da tela
  await _setupScreenOrientation();

  // Configura interface do sistema
  await _setupSystemUI();

  // Inicializa depend√™ncias do app
  await _initializeApp();

  // Executa o aplicativo com Riverpod
  runApp(
    ProviderScope(
      observers: [
        // Observer para debug em modo desenvolvimento
        if (kDebugMode) AppProviderObserver(),
      ],
      child: const KlubeCashApp(),
    ),
  );
}

/// ‚ö†Ô∏è Configura√ß√£o de tratamento de erros global
Future<void> _setupErrorHandling() async {
  // Trata erros do Flutter framework
  FlutterError.onError = (FlutterErrorDetails details) {
    FlutterError.presentError(details);
    
    if (kDebugMode) {
      debugPrint('üö® Flutter Error: ${details.exception}');
      debugPrint('Stack: ${details.stack}');
    }
    
    // Em produ√ß√£o, aqui voc√™ enviaria para crash analytics
    // FirebaseCrashlytics.instance.recordFlutterError(details);
  };

  // Trata erros ass√≠ncronos n√£o capturados
  PlatformDispatcher.instance.onError = (error, stack) {
    if (kDebugMode) {
      debugPrint('üö® Platform Error: $error');
      debugPrint('Stack: $stack');
    }
    
    // Em produ√ß√£o, aqui voc√™ enviaria para crash analytics
    // FirebaseCrashlytics.instance.recordError(error, stack);
    
    return true;
  };
}

/// üì± Configura√ß√£o de orienta√ß√£o da tela
Future<void> _setupScreenOrientation() async {
  // Define orienta√ß√µes permitidas
  await SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
}

/// üé® Configura√ß√£o da interface do sistema
Future<void> _setupSystemUI() async {
  // Configura barra de status transparente
  SystemChrome.setSystemUIOverlayStyle(
    const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: Brightness.dark,
      statusBarBrightness: Brightness.light,
      systemNavigationBarColor: Colors.white,
      systemNavigationBarIconBrightness: Brightness.dark,
      systemNavigationBarDividerColor: Colors.transparent,
    ),
  );

  // Habilita edge-to-edge no Android
  if (Platform.isAndroid) {
    SystemChrome.setEnabledSystemUIMode(
      SystemUiMode.edgeToEdge,
    );
  }
}

/// üîß Inicializa√ß√£o de depend√™ncias do aplicativo
Future<void> _initializeApp() async {
  try {
    if (kDebugMode) {
      debugPrint('üöÄ Inicializando Klube Cash...');
    }

    // Aqui voc√™ pode inicializar:
    // - Firebase
    // - Shared Preferences
    // - Secure Storage
    // - Notifications
    // - Crash Analytics
    // - etc.

    // Exemplo de inicializa√ß√µes:
    // await Firebase.initializeApp();
    // await NotificationService.initialize();
    // await SecureStorageService.initialize();

    if (kDebugMode) {
      debugPrint('‚úÖ Klube Cash inicializado com sucesso!');
    }
  } catch (error, stackTrace) {
    if (kDebugMode) {
      debugPrint('‚ùå Erro na inicializa√ß√£o: $error');
      debugPrint('Stack: $stackTrace');
    }
    
    // Em caso de erro cr√≠tico, voc√™ pode mostrar uma tela de erro
    // ou tentar recupera√ß√£o
    rethrow;
  }
}

/// üîç Observer para debug e monitoramento do Riverpod
class AppProviderObserver extends ProviderObserver {
  @override
  void didAddProvider(
    ProviderBase<Object?> provider,
    Object? value,
    ProviderContainer container,
  ) {
    if (kDebugMode) {
      debugPrint('üü¢ Provider adicionado: ${provider.name ?? provider.runtimeType}');
    }
  }

  @override
  void didDisposeProvider(
    ProviderBase<Object?> provider,
    ProviderContainer container,
  ) {
    if (kDebugMode) {
      debugPrint('üî¥ Provider removido: ${provider.name ?? provider.runtimeType}');
    }
  }

  @override
  void didUpdateProvider(
    ProviderBase<Object?> provider,
    Object? previousValue,
    Object? newValue,
    ProviderContainer container,
  ) {
    if (kDebugMode) {
      debugPrint('üîÑ Provider atualizado: ${provider.name ?? provider.runtimeType}');
    }
  }

  @override
  void providerDidFail(
    ProviderBase<Object?> provider,
    Object error,
    StackTrace stackTrace,
    ProviderContainer container,
  ) {
    if (kDebugMode) {
      debugPrint('‚ùå Provider falhou: ${provider.name ?? provider.runtimeType}');
      debugPrint('Erro: $error');
      debugPrint('Stack: $stackTrace');
    }
    
    // Em produ√ß√£o, envie para crash analytics
    // FirebaseCrashlytics.instance.recordError(error, stackTrace);
  }
}