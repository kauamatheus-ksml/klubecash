openapi: 3.0.3
info:
  title: KlubeCash External API
  description: |
    API externa do KlubeCash para integração com sistemas parceiros.
    
    ## Autenticação
    Esta API utiliza API Keys para autenticação. Inclua sua chave na header `X-API-Key`.
    
    ## Rate Limits
    - 60 requests por minuto por padrão
    - 1000 requests por hora por padrão
    - Limites específicos podem ser configurados por parceiro
    
    ## Códigos de Status
    - 200: Sucesso
    - 201: Criado com sucesso  
    - 400: Erro de validação
    - 401: Não autorizado
    - 403: Sem permissão
    - 404: Não encontrado
    - 429: Rate limit excedido
    - 500: Erro interno
  version: 1.0.0
  contact:
    name: Suporte KlubeCash
    email: suporte@klubecash.com
servers:
  - url: /api-external/v1
    description: Servidor da API Externa

security:
  - ApiKeyAuth: []

paths:
  # Auth endpoints
  /auth/info:
    get:
      tags:
        - Auth
      summary: Informações da API
      security: []
      responses:
        '200':
          description: Informações da API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfo'
  
  /auth/health:
    get:
      tags:
        - Auth
      summary: Status de saúde da API
      security: []
      responses:
        '200':
          description: API saudável
        '503':
          description: API indisponível

  # User endpoints
  /users:
    get:
      tags:
        - Users
      summary: Listar usuários
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - name: type
          in: query
          schema:
            type: string
            enum: [cliente, admin, loja]
        - name: status
          in: query
          schema:
            type: string
            enum: [ativo, inativo, bloqueado]
      responses:
        '200':
          description: Lista de usuários
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
    
    post:
      tags:
        - Users
      summary: Criar usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Usuário criado
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Obter usuário por ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Dados do usuário
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'

  /users/{id}/balance:
    get:
      tags:
        - Users
      summary: Obter saldo do usuário
      parameters:
        - $ref: '#/components/parameters/UserId'
        - name: store_id
          in: query
          schema:
            type: integer
          description: ID da loja específica (opcional)
      responses:
        '200':
          description: Saldo do usuário
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserBalance'

  # Store endpoints
  /stores:
    get:
      tags:
        - Stores
      summary: Listar lojas
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - name: status
          in: query
          schema:
            type: string
            enum: [pendente, aprovado, rejeitado]
      responses:
        '200':
          description: Lista de lojas
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Store'
    
    post:
      tags:
        - Stores
      summary: Criar loja
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStoreRequest'
      responses:
        '201':
          description: Loja criada
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Store'

  /stores/{id}:
    get:
      tags:
        - Stores
      summary: Obter loja por ID
      parameters:
        - $ref: '#/components/parameters/StoreId'
      responses:
        '200':
          description: Dados da loja
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Store'

  /stores/{id}/cashback-rules:
    get:
      tags:
        - Stores
      summary: Obter regras de cashback da loja
      parameters:
        - $ref: '#/components/parameters/StoreId'
      responses:
        '200':
          description: Regras de cashback
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CashbackRules'

  # Transaction endpoints
  /transactions:
    get:
      tags:
        - Transactions
      summary: Listar transações
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - name: user_id
          in: query
          schema:
            type: integer
        - name: store_id
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [pendente, aprovado, cancelado]
      responses:
        '200':
          description: Lista de transações
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Transaction'
    
    post:
      tags:
        - Transactions
      summary: Criar transação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '201':
          description: Transação criada
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Transaction'

  /transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Obter transação por ID
      parameters:
        - $ref: '#/components/parameters/TransactionId'
      responses:
        '200':
          description: Dados da transação
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Transaction'

  # Cashback endpoints
  /cashback/calculate:
    post:
      tags:
        - Cashback
      summary: Calcular cashback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateCashbackRequest'
      responses:
        '200':
          description: Cálculo do cashback
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CashbackCalculation'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    PageSize:
      name: page_size
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
    StoreId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
    TransactionId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1

  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        version:
          type: string

    PaginatedResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            pagination:
              type: object
              properties:
                current_page:
                  type: integer
                page_size:
                  type: integer
                total_items:
                  type: integer
                total_pages:
                  type: integer
                has_next:
                  type: boolean
                has_previous:
                  type: boolean

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        details:
          type: object

    ApiInfo:
      type: object
      properties:
        api_name:
          type: string
        version:
          type: string
        base_url:
          type: string
        requires_api_key:
          type: boolean

    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        type:
          type: string
          enum: [cliente, admin, loja]
        status:
          type: string
          enum: [ativo, inativo, bloqueado]
        created_at:
          type: string
          format: date-time
        balance:
          $ref: '#/components/schemas/UserBalance'

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        type:
          type: string
          enum: [cliente, admin, loja]
          default: cliente
        status:
          type: string
          enum: [ativo, inativo, bloqueado]
          default: ativo

    Store:
      type: object
      properties:
        id:
          type: integer
        trade_name:
          type: string
        legal_name:
          type: string
        cnpj:
          type: string
        email:
          type: string
        phone:
          type: string
        cashback_percentage:
          type: number
          format: decimal
        status:
          type: string
          enum: [pendente, aprovado, rejeitado]
        created_at:
          type: string
          format: date-time

    CreateStoreRequest:
      type: object
      required:
        - trade_name
        - legal_name
        - cnpj
        - email
        - phone
      properties:
        trade_name:
          type: string
          maxLength: 100
        legal_name:
          type: string
          maxLength: 150
        cnpj:
          type: string
          pattern: '^\d{14}$'
        email:
          type: string
          format: email
        phone:
          type: string
        cashback_percentage:
          type: number
          format: decimal
          minimum: 0
          maximum: 100
          default: 5.0

    Transaction:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        store_id:
          type: integer
        total_amount:
          type: number
          format: decimal
        cashback_amount:
          type: number
          format: decimal
        client_amount:
          type: number
          format: decimal
        transaction_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [pendente, aprovado, cancelado]
        client_name:
          type: string
        store_name:
          type: string

    CreateTransactionRequest:
      type: object
      required:
        - user_id
        - store_id
        - total_amount
      properties:
        user_id:
          type: integer
          minimum: 1
        store_id:
          type: integer
          minimum: 1
        total_amount:
          type: number
          format: decimal
          minimum: 0.01
        status:
          type: string
          enum: [pendente, aprovado]
          default: pendente

    UserBalance:
      type: object
      properties:
        available_balance:
          type: number
          format: decimal
        pending_balance:
          type: number
          format: decimal
        total_balance:
          type: number
          format: decimal

    CashbackRules:
      type: object
      properties:
        store_id:
          type: integer
        store_cashback_percentage:
          type: number
          format: decimal
        distribution:
          type: object
          properties:
            client_percentage:
              type: number
            admin_percentage:
              type: number
            store_percentage:
              type: number

    CalculateCashbackRequest:
      type: object
      required:
        - store_id
        - amount
      properties:
        store_id:
          type: integer
          minimum: 1
        amount:
          type: number
          format: decimal
          minimum: 0.01

    CashbackCalculation:
      type: object
      properties:
        store_id:
          type: integer
        purchase_amount:
          type: number
          format: decimal
        store_cashback_percentage:
          type: number
          format: decimal
        cashback_calculation:
          type: object
          properties:
            total_cashback:
              type: number
              format: decimal
            client_receives:
              type: number
              format: decimal
            admin_receives:
              type: number
              format: decimal
            store_receives:
              type: number
              format: decimal